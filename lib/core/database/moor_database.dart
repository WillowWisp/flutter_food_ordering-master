import 'dart:io';

import 'package:moor_ffi/moor_ffi.dart';
import 'package:moor_flutter/moor_flutter.dart';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';

// This file will be generated by Moor
part 'moor_database.g.dart';

@DataClassName("FoodEntity")
class Foods extends Table {
  IntColumn get id => integer().autoIncrement()();
  TextColumn get name => text()();
  TextColumn get image => text()();
  RealColumn get price => real()();
}

@DataClassName("CartEntryEntity")
class CartEntries extends Table {
  // Need userId
  IntColumn get id => integer().autoIncrement()();
  IntColumn get foodId => integer()();
  TextColumn get notes => text()();
}


LazyDatabase _openConnection() {
  // the LazyDatabase util lets us find the right location for the file async.
  return LazyDatabase(() async {
    // put the database file, called db.sqlite here, into the documents folder
    // for your app.
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(join(dbFolder.path, 'db.sqlite'));
    if (false) {
      await file.delete();
    }
    return VmDatabase(file, logStatements: true);
  });
}

@UseMoor(tables: [Foods, CartEntries])
class MyDatabase extends _$MyDatabase {
  MyDatabase() : super(_openConnection());

  // you should bump this number whenever you change or add a table definition. Migrations
  // are covered later in this readme.
  @override
  int get schemaVersion => 2;

  // @override
  // MigrationStrategy get migration => MigrationStrategy(
  //   onCreate: (Migrator m) {
  //     return m.createAll();
  //   }
  // );

  // TODO: FoodDao
  Future<List<FoodEntity>> getAllFoods() => select(foods).get();
  // Stream<List<FoodEntity>> watchAllFoods() => select(foods).watch();
  Future<FoodEntity> getFoodById(int id) => (select(foods)..where((food) => food.id.equals(id))).getSingle();
  Future insertFood(FoodEntity food) => into(foods).insert(food);
  Future updateFood(FoodEntity food) => update(foods).replace(food);
  Future deleteFood(int id) => (delete(foods)..where((food) => food.id.equals(id))).go();


  // TODO: CartEntryDao
  Future<List<CartEntryEntity>> getAllCartEntriesByUser(int userId) => select(cartEntries).get();
  Future insertCartEntry(CartEntryEntity cartEntry) => into(cartEntries).insert(cartEntry);
}